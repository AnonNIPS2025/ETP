# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y1BTmYfyN_1DnNDTHZzaD4tc8ud-GEGb
"""

import torch
from torch import nn, optim
from models.vgg19 import VGG19
from utils.sparsity import check_sparseness, layer_clips
from utils.soloss import SOloss
from datasets import get_cifar100_loaders
from train import train
from test import test

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = VGG19(num_classes=100).to(device)

train_loader, test_loader = get_cifar100_loaders()
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9, weight_decay=5e-4)
scheduler = optim.lr_scheduler.MultiStepLR(optimizer, milestones=[120, 160], gamma=0.1)

SO = True

for epoch in range(1, 180):
    print(f'\nEpoch {epoch}')
    train_loss, trail = train(model, device, train_loader, optimizer, criterion, epoch, SO, SOloss, layer_clips, check_sparseness)
    test_loss = test(model, device, test_loader, criterion)
    scheduler.step()

print("Training complete.")